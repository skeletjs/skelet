const final = require('skelet-utils/lib/final')

/**
 *
 *  A basic module
 *
 *  exposes the following lifecycle methods:
 *  - init
 *  - unload
 *  - reload
 *
 *  exposes the following hooks
 *  - preInit
 *  - postInit
 *  - preUnload
 *  - postUnload
 */
class Module {
  constructor () {
    console.log(`${this.constructor.name}: constructor`)
    this._loaded = false

    final(this, init)
    final(this, unload)
    final(this, reload)
  }

  get isLoaded () { return this._loaded }

  /**
   * pre init hook
   * @param {object} config
   */
  async preInit (config) {
    console.log(`${this.constructor.name}: preInit`)
  }

  /**
   * post init hook
   * @param {object} config
   */
  async postInit (config) {
    console.log(`${this.constructor.name}: postInit`)
  }

  /**
   * pre unload hook
   * @param {object} config
   */
  async preUnload () {
    console.log(`${this.constructor.name}: preUnload`)
  }

  /**
   * post unload hook
   * @param {object} config
   */
  async postUnload () {
    console.log(`${this.constructor.name}: postUnload`)
  }
}

/**
 * Initializer
 *
 * Calls pre and post init hook
 *
 * @param {object} config
 */
async function init (config) {
  await this.preInit(config)

  console.log(`${this.constructor.name}: init`)

  await this.postInit(config)

  this._loaded = true
}

/**
 * Unloads the module by
 *  - removing all properties on the current instance
 *  - creating a new instance and reassigning it to the current instance
 *
 * @param {object} config
 */
async function unload (config) {
  await this.preUnload()

  Object.getOwnPropertyNames(this).forEach(property => delete this[property])

  Object.assign(this, new this.constructor())

  await this.postUnload()
}

/**
 * Reloads the module by executing unload and init
 *
 * @param {object} config
 */
async function reload (config) {
  await this.unload()
  await this._init(config)
}

module.exports = Module
